package com.stayeasy.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.stayeasy.Services.JwtService;
import com.stayeasy.configs.AuthenticationService;
import com.stayeasy.dto.LoginResponse;
import com.stayeasy.dto.UserLoginDto;
import com.stayeasy.dto.UserRegisterDto;
import com.stayeasy.dto.UserResponseDto;
import com.stayeasy.entity.User;

@RequestMapping("/auth")
@RestController
public class AuthenticationController {
	@Autowired
    private final JwtService jwtService;
    
	@Autowired
    private final AuthenticationService authenticationService;

    public AuthenticationController(JwtService jwtService, AuthenticationService authenticationService) {
        this.jwtService = jwtService;
        this.authenticationService = authenticationService;
    }

    @PostMapping("/signup")
    public ResponseEntity<User> register(@RequestBody UserRegisterDto registerUserDto) {
        User registeredUser = authenticationService.signup(registerUserDto);

        return ResponseEntity.ok(registeredUser);
    }

    @PostMapping("/login")
    public ResponseEntity<LoginResponse> authenticate(@RequestBody UserLoginDto loginUserDto) {
        User authenticatedUser = authenticationService.authenticate(loginUserDto);

        String jwtToken = jwtService.generateToken(authenticatedUser);

        LoginResponse loginResponse = new LoginResponse();
        loginResponse.setToken(jwtToken);
        loginResponse.setExpiresIn(jwtService.getExpirationTime());

        return ResponseEntity.ok(loginResponse);
    }
    
    @PutMapping("/update/{id}")
    public ResponseEntity<User> UpdateUser(@PathVariable Long id,@RequestBody UserRegisterDto registerUserDto) {
        User registeredUser = authenticationService.updateuser(registerUserDto);

        return ResponseEntity.ok(registeredUser);
    }
    
    @DeleteMapping("/user/{id}")
    public ResponseEntity<?> UpdateUser(@PathVariable Long id) {
        

        return ResponseEntity.ok(authenticationService.deleteuser(id));
    }
    
}
